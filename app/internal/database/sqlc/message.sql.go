// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: message.sql

package sqlc

import (
	"context"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (content, recipient)
VALUES ($1, $2)
RETURNING id, content, recipient, tries, created_at, sending_at, sent_at
`

type CreateMessageParams struct {
	Content   string
	Recipient string
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage, arg.Content, arg.Recipient)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.Recipient,
		&i.Tries,
		&i.CreatedAt,
		&i.SendingAt,
		&i.SentAt,
	)
	return i, err
}

const getPendingMessagesAndMarkAsSending = `-- name: GetPendingMessagesAndMarkAsSending :many
WITH updated AS (
  SELECT id
  FROM messages
  WHERE (
    (sending_at IS NULL OR (sending_at < NOW() - INTERVAL '1 hour' AND sent_at IS NULL))
    AND tries < 3
  )
  ORDER BY created_at ASC 
  LIMIT $1
) UPDATE messages
SET sending_at = NOW(), tries = tries + 1
WHERE id IN (SELECT id FROM updated)
RETURNING id, content, recipient, tries, created_at, sending_at, sent_at
`

func (q *Queries) GetPendingMessagesAndMarkAsSending(ctx context.Context, limit int32) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getPendingMessagesAndMarkAsSending, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.Recipient,
			&i.Tries,
			&i.CreatedAt,
			&i.SendingAt,
			&i.SentAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSentMessages = `-- name: ListSentMessages :many
SELECT id, content, recipient, tries, created_at, sending_at, sent_at FROM messages
WHERE sent_at IS NOT NULL
ORDER BY sent_at DESC
LIMIT $1
`

func (q *Queries) ListSentMessages(ctx context.Context, limit int32) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, listSentMessages, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.Recipient,
			&i.Tries,
			&i.CreatedAt,
			&i.SendingAt,
			&i.SentAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markMessageAsSent = `-- name: MarkMessageAsSent :exec
UPDATE messages
SET sent_at = NOW()
WHERE id = $1
`

func (q *Queries) MarkMessageAsSent(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, markMessageAsSent, id)
	return err
}
